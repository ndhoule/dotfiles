#!/usr/bin/env bash

#
# Perform an install of all developer dependencies.
#

set -o errexit
set -o nounset
set -o pipefail

CURRENT_SCRIPT_PATH="$(cd "$(dirname "$0")" ; pwd -P)"

# Validate that the current OS is supported
case "${OSTYPE}" in
  darwin* | linux*):
    # continue
    ;;
  *):
    echo "ERROR: Unsupported OS: '${OSTYPE}'"
    exit 1
    ;;
esac

#
# Check dependencies
#

if [[ -z "${GOPATH}" ]]; then
  echo "ERROR: Must set GOPATH before running this script."
  exit 1
fi

#
# Install dependencies
#

case "${OSTYPE}" in
  darwin*):
    "${CURRENT_SCRIPT_PATH}/osx/install"
    ;;
  linux*):
    "${CURRENT_SCRIPT_PATH}/linux/install"
    ;;
esac

#
# Link dotfiles
#

packages=(
  "ag"
  "bin"
  "clojure"
  "emacs"
  "git"
  "haskell"
  "javascript"
  "ruby"
  "ssh"
  "tmux"
  "vim"
  "zsh"
)

if command -v stow > /dev/null 2>&1; then
  echo "Symlinking dotfiles into $HOME..."
  for pkg in "${packages[@]}"; do
    stow --target="$HOME" --verbose=1 "${pkg}"
  done
  echo "Symlinked dotfiles into $HOME."
else
  echo "stow not installed. Skipping dotfiles symlinking..."
fi

#
# Install language packages
#

go_packages=(
  "github.com/alecthomas/gometalinter"
  "github.com/kardianos/govendor"
  "github.com/nsf/gocode"
  "golang.org/x/tools/cmd/gorename"
  "golang.org/x/tools/cmd/guru"
)

if command -v go > /dev/null 2>&1; then
  echo "Installing Go packages..."
  for pkg in "${go_packages[@]}"; do
    go get -u "${pkg}"
  done
  echo "Installed Go packages."
else
  echo "Go not installed. Skipping package installation."
fi
